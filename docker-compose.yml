version: '2'

services:
  nginx:
    build:
      context: ./nginx-container/
      dockerfile: ./nginx-dockerfile
    restart: always
    volumes: # instead of volume mount copy build directory (better for PROD)
      - type: volume
        source: dist
        target: /app
        read_only: true
    ports:
      - 443:443
      - 80:80
    links:
      - apiservice
    depends_on:
      frontendbuild:
        condition: service_completed_successfully
    networks:
      - frontend_network
      - admin_db

  apiservice:
    build:
      context: ./fastapi-container
      dockerfile: ./Dockerfile
    deploy:
      mode: replicated
      replicas: 4
    restart: always
    # links:
      # - mongodb
    networks:
      - frontend_network
      - backend_network

  mongodb:
    build: 
      dockerfile: ./mongo-containers/mongodb-dockerfile
    env_file:
      - ./mongo-containers/mongodb.env
    command:
      mongod --auth --tlsMode requireTLS --tlsCertificateKeyFile /cft/keycert.pem
    volumes:
      - mongo_stuff:/data/db
      - ./mongo-containers/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend_network

  mongo-express:
    build: 
      dockerfile: ./mongo-containers/mongoexpress-dockerfile
    env_file:
      - ./mongo-containers/mongoexpress.env
    volumes:
      - ./mongo-containers/mongoconfig.js:/node_modules/mongo-express/config.js:ro
    networks:
      - backend_network
      - admin_db
    links:
      - mongodb
    restart: always

  
  frontendbuild: # just builds and exits
    image: node:alpine
    environment:
      - APIloc=https://192.168.2.233
    volumes:
      - type: volume
        source: dist
        target: /tmp/distbuild
      - "./newapp:/root/webapp"
    command: sh -c "cd /root/webapp && npm run build"
    restart: no

volumes:
  dist:
  mongo_stuff:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  admin_db:
    driver: bridge
